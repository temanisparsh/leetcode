{"link": "https://leetcode.com/problems/destination-city", "name": "Destination City", "difficulty": "Easy", "statement": "<div><p>You are given the array <code>paths</code>, where <code>paths[i] = [cityA<sub>i</sub>, cityB<sub>i</sub>]</code> means there&nbsp;exists a direct path going from <code>cityA<sub>i</sub></code> to <code>cityB<sub>i</sub></code>. <em>Return the destination city, that is, the city without any path outgoing to another city.</em></p>\n\n<p>It is guaranteed that the graph of paths forms a line without any loop, therefore, there will be exactly one destination city.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre><strong>Input:</strong> paths = [[\"London\",\"New York\"],[\"New York\",\"Lima\"],[\"Lima\",\"Sao Paulo\"]]\n<strong>Output:</strong> \"Sao Paulo\" \n<strong>Explanation:</strong> Starting at \"London\" city you will reach \"Sao Paulo\" city which is the destination city. Your trip consist of: \"London\" -&gt; \"New York\" -&gt; \"Lima\" -&gt; \"Sao Paulo\".\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre><strong>Input:</strong> paths = [[\"B\",\"C\"],[\"D\",\"B\"],[\"C\",\"A\"]]\n<strong>Output:</strong> \"A\"\n<strong>Explanation:</strong> All possible trips are:&nbsp;\n\"D\" -&gt; \"B\" -&gt; \"C\" -&gt; \"A\".&nbsp;\n\"B\" -&gt; \"C\" -&gt; \"A\".&nbsp;\n\"C\" -&gt; \"A\".&nbsp;\n\"A\".&nbsp;\nClearly the destination city is \"A\".\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre><strong>Input:</strong> paths = [[\"A\",\"Z\"]]\n<strong>Output:</strong> \"Z\"\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= paths.length &lt;= 100</code></li>\n\t<li><code>paths[i].length == 2</code></li>\n\t<li><code>1 &lt;=&nbsp;cityA<sub>i</sub>.length,&nbsp;cityB<sub>i</sub>.length &lt;= 10</code></li>\n\t<li><code>cityA<sub>i&nbsp;</sub><font face=\"monospace\">!=&nbsp;</font>cityB<sub>i</sub></code></li>\n\t<li>All strings&nbsp;consist of lowercase and uppercase English letters and the space character.</li>\n</ul>\n</div>", "language": "cpp", "solution": "#include <iostream>\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    string destCity(vector<vector<string>>& paths) {\n        \n\n        set<string> all;\n        for (vector<string> path: paths) {\n            all.insert(path[0]);\n            all.insert(path[1]);\n        }\n\n        set<string> outonly;\n        for (vector<string> path: paths) {\n            outonly.insert(path[0]);\n        }\n\n        string city;\n\n        for(string c: all) {\n            if (outonly.find(c) == outonly.end()) {\n                city = c;\n                break;\n            }\n        }\n\n        return city;\n\n    }\n};"}
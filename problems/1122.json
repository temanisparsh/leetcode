{"link": "https://leetcode.com/problems/relative-sort-array", "name": "Relative Sort Array", "difficulty": "Easy", "statement": "<div><p>Given two arrays <code>arr1</code> and <code>arr2</code>, the elements of <code>arr2</code> are distinct, and all elements in <code>arr2</code> are also in <code>arr1</code>.</p>\n\n<p>Sort the elements of <code>arr1</code> such that the relative ordering of items in <code>arr1</code> are the same as in <code>arr2</code>.&nbsp; Elements that don't appear in <code>arr2</code> should be placed at the end of <code>arr1</code> in <strong>ascending</strong> order.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> arr1 = [2,3,1,3,2,4,6,7,9,2,19], arr2 = [2,1,4,3,9,6]\n<strong>Output:</strong> [2,2,2,1,4,3,3,9,6,7,19]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>arr1.length, arr2.length &lt;= 1000</code></li>\n\t<li><code>0 &lt;= arr1[i], arr2[i] &lt;= 1000</code></li>\n\t<li>Each&nbsp;<code>arr2[i]</code>&nbsp;is&nbsp;distinct.</li>\n\t<li>Each&nbsp;<code>arr2[i]</code> is in <code>arr1</code>.</li>\n</ul>\n</div>", "language": "cpp", "solution": "#include <iostream>\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nclass Solution\n{\npublic:\n    vector<int> relativeSortArray(vector<int> &arr1, vector<int> &arr2)\n    {\n\n        int *m1 = (int *)malloc(sizeof(int) * 1001);\n        fill_n(m1, 1001, 0);\n\n        for (int i : arr1)\n            ++m1[i];\n\n        int *m2 = (int *)malloc(sizeof(int) * 1001);\n        fill_n(m2, 1001, 0);\n\n        for (int i : arr2)\n            ++m2[i];\n\n        vector<int> out;\n        vector<int> exc;\n\n        for (int i : arr2)\n        {\n            if (m2[i])\n            {\n                int count = m1[i];\n                for (int j = 0; j < count; ++j)\n                {\n                    out.push_back(i);\n                }\n            }\n        }\n\n        for (int i = 0; i <= 1000; ++i)\n        {\n            if (!m2[i])\n            {\n                int count = m1[i];\n                for (int j = 0; j < count; ++j)\n                {\n                    exc.push_back(i);\n                }\n            }\n        }\n\n        sort(exc.begin(), exc.end());\n        for (int i : exc)\n            out.push_back(i);\n\n        return out;\n    }\n};"}
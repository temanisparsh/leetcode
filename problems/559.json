{"link": "https://leetcode.com/problems/maximum-depth-of-n-ary-tree", "name": "Maximum Depth of N-ary Tree", "difficulty": "Easy", "statement": "<div><p>Given a n-ary tree, find its maximum depth.</p>\n\n<p>The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.</p>\n\n<p><em>Nary-Tree input serialization&nbsp;is represented in their level order traversal, each group of children is separated by the null value (See examples).</em></p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<p><img src=\"https://assets.leetcode.com/uploads/2018/10/12/narytreeexample.png\" style=\"width: 100%; max-width: 300px;\"></p>\n\n<pre><strong>Input:</strong> root = [1,null,3,2,4,null,5,6]\n<strong>Output:</strong> 3\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/11/08/sample_4_964.png\" style=\"width: 296px; height: 241px;\"></p>\n\n<pre><strong>Input:</strong> root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\n<strong>Output:</strong> 5\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The depth of the n-ary tree is less than or equal to <code>1000</code>.</li>\n\t<li>The total number of nodes is between <code>[0,&nbsp;10^4]</code>.</li>\n</ul>\n</div>", "language": "c", "solution": "\nstruct Node\n{\n    int val;\n    int numChildren;\n    struct Node **children;\n};\n\nint *maxDepth(struct Node *root)\n{\n    return calc_depth(root, 0);\n}\n\nint calc_depth(struct Node *root, int depth)\n{\n    if (!root)\n        return depth;\n    int old_depth = depth;\n    depth += 1;\n    for (int i = 0; i < root->numChildren; i++)\n    {\n        int newd = calc_depth(root->children[i], old_depth + 1);\n        printf(\"%d\\n\", newd);\n        depth = depth > newd ? depth : newd;\n    }\n    return depth;\n}"}
{"link": "https://leetcode.com/problems/self-dividing-numbers", "name": "Self Dividing Numbers", "difficulty": "Easy", "statement": "<div><p>\nA <i>self-dividing number</i> is a number that is divisible by every digit it contains.\n</p><p>\nFor example, 128 is a self-dividing number because <code>128 % 1 == 0</code>, <code>128 % 2 == 0</code>, and <code>128 % 8 == 0</code>.\n</p><p>\nAlso, a self-dividing number is not allowed to contain the digit zero.\n</p><p>\nGiven a lower and upper number bound, output a list of every possible self dividing number, including the bounds if possible.\n</p>\n<p><b>Example 1:</b><br>\n</p><pre><b>Input:</b> \nleft = 1, right = 22\n<b>Output:</b> [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n</pre>\n<p></p>\n\n<p><b>Note:</b>\n</p><li>The boundaries of each input argument are <code>1 &lt;= left &lt;= right &lt;= 10000</code>.</li>\n<p></p></div>", "language": "cpp", "solution": "#include <iostream>\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    vector<int> selfDividingNumbers(int left, int right) {\n\n        vector<int> res;\n        for(int i = left; i <= right; i++) {\n\n            int isValid = 1;\n            int num = i;\n            while (num) {\n                int rem = num % 10;\n                if (rem == 0 || i % rem != 0) isValid = 0;\n                num /= 10;\n            }\n\n            if (isValid) res.push_back(i);\n\n        }\n\n        return res;\n        \n    }\n};"}
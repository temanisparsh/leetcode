{"link": "https://leetcode.com/problems/decrypt-string-from-alphabet-to-integer-mapping", "name": "Decrypt String from Alphabet to Integer Mapping", "difficulty": "Easy", "statement": "<div><p>Given a string <code>s</code> formed by digits (<code>'0'</code> - <code>'9'</code>)&nbsp;and <code>'#'</code>&nbsp;.&nbsp;We want to map <code>s</code> to English lowercase characters as follows:</p>\n\n<ul>\n\t<li>Characters (<code>'a'</code> to <code>'i')</code> are&nbsp;represented by&nbsp;(<code>'1'</code> to&nbsp;<code>'9'</code>)&nbsp;respectively.</li>\n\t<li>Characters (<code>'j'</code> to <code>'z')</code> are represented by (<code>'10#'</code>&nbsp;to&nbsp;<code>'26#'</code>)&nbsp;respectively.&nbsp;</li>\n</ul>\n\n<p>Return the string formed after mapping.</p>\n\n<p>It's guaranteed that a unique mapping will always exist.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre><strong>Input:</strong> s = \"10#11#12\"\n<strong>Output:</strong> \"jkab\"\n<strong>Explanation:</strong> \"j\" -&gt; \"10#\" , \"k\" -&gt; \"11#\" , \"a\" -&gt; \"1\" , \"b\" -&gt; \"2\".\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre><strong>Input:</strong> s = \"1326#\"\n<strong>Output:</strong> \"acz\"\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre><strong>Input:</strong> s = \"25#\"\n<strong>Output:</strong> \"y\"\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre><strong>Input:</strong> s = \"12345678910#11#12#13#14#15#16#17#18#19#20#21#22#23#24#25#26#\"\n<strong>Output:</strong> \"abcdefghijklmnopqrstuvwxyz\"\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 1000</code></li>\n\t<li><code>s[i]</code> only contains digits letters (<code>'0'</code>-<code>'9'</code>) and <code>'#'</code>&nbsp;letter.</li>\n\t<li><code>s</code> will be valid string&nbsp;such that mapping is always possible.</li>\n</ul></div>", "language": "cpp", "solution": "#include <iostream>\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    string freqAlphabets(string s) {\n\n        stringstream res;\n\n        int n = s.length();\n\n        for(int i = 0; i < n; i++) {\n            if (i+2 < n && s[i+2] == '#') {\n\n                int a = (int)s[i] - 48;\n                int b = (int)s[i+1] - 48;\n\n                char r = (char)(106 + (a-1)*10 + b);\n                res << r;\n                i += 2;\n            }\n            else {\n                char r = (char)((int)s[i] + 48);\n                res << r;\n            }\n        }\n\n        return res.str();\n        \n    }\n};"}
{"link": "https://leetcode.com/problems/remove-outermost-parentheses", "name": "Remove Outermost Parentheses", "difficulty": "Easy", "statement": "<div><p>A valid parentheses string is either empty <code>(\"\")</code>, <code>\"(\" + A + \")\"</code>, or <code>A + B</code>, where <code>A</code> and <code>B</code> are valid parentheses strings, and <code>+</code> represents string concatenation.&nbsp; For example, <code>\"\"</code>, <code>\"()\"</code>, <code>\"(())()\"</code>, and <code>\"(()(()))\"</code> are all valid parentheses strings.</p>\n\n<p>A valid parentheses string <code>S</code> is <strong>primitive</strong> if it is nonempty, and there does not exist a way to split it into <code>S = A+B</code>, with <code>A</code> and <code>B</code> nonempty valid parentheses strings.</p>\n\n<p>Given a valid parentheses string <code>S</code>, consider its primitive decomposition: <code>S = P_1 + P_2 + ... + P_k</code>, where <code>P_i</code> are primitive valid parentheses strings.</p>\n\n<p>Return <code>S</code> after removing the outermost parentheses of every primitive string in the primitive decomposition of <code>S</code>.</p>\n\n<p>&nbsp;</p>\n\n<p><strong>Example 1:</strong></p>\n\n<pre><strong>Input: </strong><span id=\"example-input-1-1\">\"(()())(())\"</span>\n<strong>Output: </strong><span id=\"example-output-1\">\"()()()\"</span>\n<strong>Explanation: </strong>\nThe input string is \"(()())(())\", with primitive decomposition \"(()())\" + \"(())\".\nAfter removing outer parentheses of each part, this is \"()()\" + \"()\" = \"()()()\".\n</pre>\n\n<div>\n<p><strong>Example 2:</strong></p>\n\n<pre><strong>Input: </strong><span id=\"example-input-2-1\">\"(()())(())(()(()))\"</span>\n<strong>Output: </strong><span id=\"example-output-2\">\"()()()()(())\"</span>\n<strong>Explanation: </strong>\nThe input string is \"(()())(())(()(()))\", with primitive decomposition \"(()())\" + \"(())\" + \"(()(()))\".\nAfter removing outer parentheses of each part, this is \"()()\" + \"()\" + \"()(())\" = \"()()()()(())\".\n</pre>\n\n<div>\n<p><strong>Example 3:</strong></p>\n\n<pre><strong>Input: </strong><span id=\"example-input-3-1\">\"()()\"</span>\n<strong>Output: </strong><span id=\"example-output-3\">\"\"</span>\n<strong>Explanation: </strong>\nThe input string is \"()()\", with primitive decomposition \"()\" + \"()\".\nAfter removing outer parentheses of each part, this is \"\" + \"\" = \"\".\n</pre>\n\n<p>&nbsp;</p>\n</div>\n</div>\n\n<p><strong>Note:</strong></p>\n\n<ol>\n\t<li><code>S.length &lt;= 10000</code></li>\n\t<li><code>S[i]</code> is <code>\"(\"</code> or <code>\")\"</code></li>\n\t<li><code>S</code> is a valid parentheses string</li>\n</ol>\n\n<div>\n<div>\n<div>&nbsp;</div>\n</div>\n</div></div>", "language": "cpp", "solution": "#include <iostream>\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nclass Solution\n{\npublic:\n    string removeOuterParentheses(string S)\n    {\n\n        int n = S.length();\n        char res[n];\n\n        fill_n(res, n, '\\0');\n\n        int pos = 0;\n        int diff = 0;\n        for (char i : S)\n        {\n\n            if (i == '(')\n            {\n                if (diff)\n                {\n                    res[pos] = '(';\n                    ++pos;\n                }\n                ++diff;\n            }\n            else\n            {\n                --diff;\n                if (diff)\n                {\n                    res[pos] = ')';\n                    ++pos;\n                }\n            }\n        }\n\n        string r(res);\n\n        return r;\n    }\n};"}
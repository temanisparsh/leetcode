{"link": "https://leetcode.com/problems/unique-morse-code-words", "name": "Unique Morse Code Words", "difficulty": "Easy", "statement": "<div><p>International Morse Code defines a standard encoding where each letter is mapped to a series of dots and dashes, as follows: <code>\"a\"</code> maps to <code>\".-\"</code>, <code>\"b\"</code> maps to <code>\"-...\"</code>, <code>\"c\"</code> maps to <code>\"-.-.\"</code>, and so on.</p>\n\n<p>For convenience, the full table for the 26 letters of the English alphabet is given below:</p>\n\n<pre>[\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]</pre>\n\n<p>Now, given a list of words, each word can be written as a concatenation of the Morse code of each letter. For example, \"cab\" can be written as \"-.-..--...\", (which is the concatenation \"-.-.\" + \".-\" + \"<code>-...</code>\"). We'll call such a concatenation, the transformation&nbsp;of a word.</p>\n\n<p>Return the number of different transformations among all words we have.</p>\n\n<pre><strong>Example:</strong>\n<strong>Input:</strong> words = [\"gin\", \"zen\", \"gig\", \"msg\"]\n<strong>Output:</strong> 2\n<strong>Explanation: </strong>\nThe transformation of each word is:\n\"gin\" -&gt; \"--...-.\"\n\"zen\" -&gt; \"--...-.\"\n\"gig\" -&gt; \"--...--.\"\n\"msg\" -&gt; \"--...--.\"\n\nThere are 2 different transformations, \"--...-.\" and \"--...--.\".\n</pre>\n\n<p><strong>Note:</strong></p>\n\n<ul>\n\t<li>The length of <code>words</code> will be at most <code>100</code>.</li>\n\t<li>Each <code>words[i]</code> will have length in range <code>[1, 12]</code>.</li>\n\t<li><code>words[i]</code> will only consist of lowercase letters.</li>\n</ul>\n</div>", "language": "cpp", "solution": "#include <iostream>\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nclass Solution\n{\npublic:\n    int uniqueMorseRepresentations(vector<string> &words)\n    {\n\n        vector<string> codes;\n        int n = words.size();\n\n        string mapping[26] = {\".-\", \"-...\", \"-.-.\", \"-..\", \".\", \"..-.\", \"--.\", \"....\", \"..\", \".---\", \"-.-\", \".-..\", \"--\", \"-.\", \"---\", \".--.\", \"--.-\", \".-.\", \"...\", \"-\", \"..-\", \"...-\", \".--\", \"-..-\", \"-.--\", \"--..\"};\n\n        for (string word : words)\n        {\n\n            stringstream r;\n\n            for (char c : word)\n            {\n                r << mapping[(int)(c)-97];\n            }\n\n            string res = r.str();\n            codes.push_back(res);\n        }\n\n        sort(codes.begin(), codes.end());\n\n        int count = n > 0 ? 1 : 0;\n\n        for (int i = 1; i < n; i++)\n        {\n            if (codes[i].compare(codes[i - 1]))\n                ++count;\n        }\n\n        return count;\n    }\n};"}
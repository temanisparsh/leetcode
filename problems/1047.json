{"link": "https://leetcode.com/problems/remove-all-adjacent-duplicates-in-string", "name": "Remove All Adjacent Duplicates In String", "difficulty": "Easy", "statement": "<div><p>Given a string <code>S</code> of lowercase letters, a <em>duplicate removal</em> consists of choosing two adjacent and equal letters, and removing&nbsp;them.</p>\n\n<p>We repeatedly make duplicate removals on S until we no longer can.</p>\n\n<p>Return the final string after all such duplicate removals have been made.&nbsp; It is guaranteed the answer is unique.</p>\n\n<p>&nbsp;</p>\n\n<p><strong>Example 1:</strong></p>\n\n<pre><strong>Input: </strong><span id=\"example-input-1-1\">\"abbaca\"</span>\n<strong>Output: </strong><span id=\"example-output-1\">\"ca\"</span>\n<strong>Explanation: </strong>\nFor example, in \"abbaca\" we could remove \"bb\" since the letters are adjacent and equal, and this is the only possible move.&nbsp; The result of this move is that the string is \"aaca\", of which only \"aa\" is possible, so the final string is \"ca\".\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>Note:</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= S.length &lt;= 20000</code></li>\n\t<li><code>S</code> consists only of English lowercase letters.</li>\n</ol></div>", "language": "cpp", "solution": "#include <iostream>\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nclass Solution\n{\npublic:\n    string removeDuplicates(string S)\n    {\n\n        stringstream out;\n        vector<char> s;\n        for (char ch : S)\n            s.push_back(ch);\n\n        int n = S.length();\n\n        for (int i = 0; i < n - 1; i++)\n        {\n            \n            if (s[i] == s[i + 1])\n            {\n\n                s.erase(s.begin() + i+1);\n                s.erase(s.begin() + i);\n\n                i -= 2;\n                n -= 2;\n\n                if (i < -1)\n                    i = -1;\n\n            }\n        }\n\n        for(char ch: s) out << ch;\n\n        return out.str();\n    }\n};"}
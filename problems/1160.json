{"link": "https://leetcode.com/problems/find-words-that-can-be-formed-by-characters", "name": "Find Words That Can Be Formed by Characters", "difficulty": "Easy", "statement": "<div><p>You are given an array of strings&nbsp;<code>words</code>&nbsp;and a string&nbsp;<code>chars</code>.</p>\n\n<p>A string is <em>good</em>&nbsp;if&nbsp;it can be formed by&nbsp;characters from <code>chars</code>&nbsp;(each character&nbsp;can only be used once).</p>\n\n<p>Return the sum of lengths of all good strings in <code>words</code>.</p>\n\n<p>&nbsp;</p>\n\n<p><strong>Example 1:</strong></p>\n\n<pre><strong>Input: </strong>words = <span id=\"example-input-1-1\">[\"cat\",\"bt\",\"hat\",\"tree\"]</span>, chars = <span id=\"example-input-1-2\">\"atach\"</span>\n<strong>Output: </strong><span id=\"example-output-1\">6</span>\n<strong>Explanation: </strong>\nThe strings that can be formed are \"cat\" and \"hat\" so the answer is 3 + 3 = 6.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre><strong>Input: </strong>words = <span id=\"example-input-2-1\">[\"hello\",\"world\",\"leetcode\"]</span>, chars = <span id=\"example-input-2-2\">\"welldonehoneyr\"</span>\n<strong>Output: </strong><span id=\"example-output-2\">10</span>\n<strong>Explanation: </strong>\nThe strings that can be formed are \"hello\" and \"world\" so the answer is 5 + 5 = 10.\n</pre>\n\n<p>&nbsp;</p>\n\n<p><span><strong>Note:</strong></span></p>\n\n<ol>\n\t<li><code>1 &lt;= words.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= words[i].length, chars.length&nbsp;&lt;= 100</code></li>\n\t<li>All strings contain lowercase English letters only.</li>\n</ol></div>", "language": "cpp", "solution": "#include <iostream>\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nclass Solution\n{\npublic:\n    int countCharacters(vector<string> &words, string chars)\n    {\n\n        int sum = 0;\n        int *count = (int *)malloc(sizeof(int) * 26);\n        fill_n(count, 26, 0);\n\n        for (char ch : chars)\n        {\n            ++count[(int)(ch)-97];\n        }\n\n        for (string s : words)\n        {\n            int *count_t = (int *)malloc(sizeof(int) * 26);\n            fill_n(count_t, 26, 0);\n\n            for (char ch : s)\n            {\n                ++count_t[(int)(ch)-97];\n            }\n\n            int check = 1;\n\n            for(int i = 0;  i < 26; i++) {\n                if (count_t[i] > count[i]) {\n                    check = 0;\n                    break;\n                }\n            }\n\n            if (check) sum += s.length();\n        }\n        return sum;\n    }\n};"}
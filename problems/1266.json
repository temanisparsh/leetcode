{"link": "https://leetcode.com/problems/minimum-time-visiting-all-points", "name": "Minimum Time Visiting All Points", "difficulty": "Easy", "statement": "<div><p>On a plane there are <code>n</code> points with integer coordinates <code>points[i] = [xi, yi]</code>. Your task is to find the minimum time in seconds to visit all points.</p>\n\n<p>You can move according to the next rules:</p>\n\n<ul>\n\t<li>In one second always you can either move vertically, horizontally by one unit or diagonally (it means to move one unit vertically and one unit horizontally in one second).</li>\n\t<li>You have to visit the points in the same order as they appear in the array.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/11/14/1626_example_1.PNG\" style=\"width: 500px; height: 428px;\">\n<pre><strong>Input:</strong> points = [[1,1],[3,4],[-1,0]]\n<strong>Output:</strong> 7\n<strong>Explanation: </strong>One optimal path is <strong>[1,1]</strong> -&gt; [2,2] -&gt; [3,3] -&gt; <strong>[3,4] </strong>-&gt; [2,3] -&gt; [1,2] -&gt; [0,1] -&gt; <strong>[-1,0]</strong>   \nTime from [1,1] to [3,4] = 3 seconds \nTime from [3,4] to [-1,0] = 4 seconds\nTotal time = 7 seconds</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre><strong>Input:</strong> points = [[3,2],[-2,2]]\n<strong>Output:</strong> 5\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>points.length == n</code></li>\n\t<li><code>1 &lt;= n&nbsp;&lt;= 100</code></li>\n\t<li><code>points[i].length == 2</code></li>\n\t<li><code>-1000&nbsp;&lt;= points[i][0], points[i][1]&nbsp;&lt;= 1000</code></li>\n</ul>\n</div>", "language": "cpp", "solution": "#include<iostream>\n#include<bits/stdc++.h>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    int minTimeToVisitAllPoints(vector<vector<int>>& points) {\n\n        int cost = 0;\n        int n = points.size();\n\n        for(int i = 0; i < n - 1; i++) {\n\n            vector<int> a = points[i];\n            vector<int> b = points[i+1];\n\n            cost += max(abs(a[0]-b[0]), abs(a[1]-b[1]));\n\n            cout << cost << endl;\n\n        }\n        return cost;\n        \n    }\n};"}
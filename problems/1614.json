{"link": "https://leetcode.com/problems/maximum-nesting-depth-of-the-parentheses", "name": "Maximum Nesting Depth of the Parentheses", "difficulty": "Easy", "statement": "<div><p>A string is a <strong>valid parentheses string</strong> (denoted <strong>VPS</strong>) if it meets one of the following:</p>\n\n<ul>\n\t<li>It is an empty string <code>\"\"</code>, or a single character not equal to <code>\"(\"</code> or <code>\")\"</code>,</li>\n\t<li>It can be written as <code>AB</code> (<code>A</code> concatenated with <code>B</code>), where <code>A</code> and <code>B</code> are <strong>VPS</strong>'s, or</li>\n\t<li>It can be written as <code>(A)</code>, where <code>A</code> is a <strong>VPS</strong>.</li>\n</ul>\n\n<p>We can similarly define the <strong>nesting depth</strong> <code>depth(S)</code> of any VPS <code>S</code> as follows:</p>\n\n<ul>\n\t<li><code>depth(\"\") = 0</code></li>\n\t<li><code>depth(A + B) = max(depth(A), depth(B))</code>, where <code>A</code> and <code>B</code> are <strong>VPS</strong>'s</li>\n\t<li><code>depth(\"(\" + A + \")\") = 1 + depth(A)</code>, where <code>A</code> is a <strong>VPS</strong>.</li>\n</ul>\n\n<p>For example, <code>\"\"</code>, <code>\"()()\"</code>, and <code>\"()(()())\"</code> are <strong>VPS</strong>'s (with nesting depths 0, 1, and 2), and <code>\")(\"</code> and <code>\"(()\"</code> are not <strong>VPS</strong>'s.</p>\n\n<p>Given a <strong>VPS</strong> represented as string <code>s</code>, return <em>the <strong>nesting depth</strong> of </em><code>s</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre><strong>Input:</strong> s = \"(1+(2*3)+((<u>8</u>)/4))+1\"\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> Digit 8 is inside of 3 nested parentheses in the string.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre><strong>Input:</strong> s = \"(1)+((2))+(((<u>3</u>)))\"\n<strong>Output:</strong> 3\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre><strong>Input:</strong> s = \"1+(<u>2</u>*3)/(2-1)\"\n<strong>Output:</strong> 1\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre><strong>Input:</strong> s = \"<u>1</u>\"\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 100</code></li>\n\t<li><code>s</code> consists of digits <code>0-9</code> and characters <code>'+'</code>, <code>'-'</code>, <code>'*'</code>, <code>'/'</code>, <code>'('</code>, and <code>')'</code>.</li>\n\t<li>It is guaranteed that parentheses expression <code>s</code> is a <strong>VPS</strong>.</li>\n</ul>\n</div>", "language": "cpp", "solution": "#include <iostream>\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nclass Solution\n{\npublic:\n    int maxDepth(string s)\n    {\n\n        int max_depth = 0;\n        int current_depth = 0;\n\n        for (char ch : s)\n        {\n            if (ch == '(')\n                ++current_depth;\n            else if (ch == ')')\n                --current_depth;\n            max_depth = max_depth > current_depth ? max_depth : current_depth;\n        }\n\n        return max_depth;\n    }\n};"}
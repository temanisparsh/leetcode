{"link": "https://leetcode.com/problems/cells-with-odd-values-in-a-matrix", "name": "Cells with Odd Values in a Matrix", "difficulty": "Easy", "statement": "<div><p>Given&nbsp;<code>n</code>&nbsp;and&nbsp;<code>m</code>&nbsp;which are the dimensions of a matrix initialized by zeros and given an array <code>indices</code>&nbsp;where <code>indices[i] = [ri, ci]</code>. For each pair of <code>[ri, ci]</code>&nbsp;you have to increment all cells in row <code>ri</code> and column <code>ci</code>&nbsp;by 1.</p>\n\n<p>Return <em>the number of cells with odd values</em> in the matrix after applying the increment to all <code>indices</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/10/30/e1.png\" style=\"width: 600px; height: 118px;\">\n<pre><strong>Input:</strong> n = 2, m = 3, indices = [[0,1],[1,1]]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> Initial matrix = [[0,0,0],[0,0,0]].\nAfter applying first increment it becomes [[1,2,1],[0,1,0]].\nThe final matrix will be [[1,3,1],[1,3,1]] which contains 6 odd numbers.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/10/30/e2.png\" style=\"width: 600px; height: 150px;\">\n<pre><strong>Input:</strong> n = 2, m = 2, indices = [[1,1],[0,0]]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> Final matrix = [[2,2],[2,2]]. There is no odd number in the final matrix.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 50</code></li>\n\t<li><code>1 &lt;= m &lt;= 50</code></li>\n\t<li><code>1 &lt;= indices.length &lt;= 100</code></li>\n\t<li><code>0 &lt;= indices[i][0] &lt;&nbsp;n</code></li>\n\t<li><code>0 &lt;= indices[i][1] &lt;&nbsp;m</code></li>\n</ul>\n</div>", "language": "cpp", "solution": "#include <iostream>\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nclass Solution\n{\npublic:\n    int oddCells(int n, int m, vector<vector<int>> &indices)\n    {\n\n        int arr[n][m];\n\n        for (int i = 0; i < n; i++)\n        {\n            fill_n(arr[i], m, 0);\n        }\n\n        for (vector<int> i : indices)\n        {\n            int r = i[0];\n            int c = i[1];\n\n            for (int k = 0; k < m; k++)\n            {\n                ++arr[r][k];\n            }\n\n            for (int k = 0; k < n; k++)\n            {\n                ++arr[k][c];\n            }\n        }\n\n        int count = 0;\n\n        for(int i = 0; i < n; i++) {\n            for(int j: arr[i]) {\n                count += j%2;\n            }\n        }\n\n        return count;\n    }\n};"}
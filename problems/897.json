{"link": "https://leetcode.com/problems/increasing-order-search-tree", "name": "Increasing Order Search Tree", "difficulty": "Easy", "statement": "<div><p>Given a binary search tree, rearrange the tree in <strong>in-order</strong> so that the leftmost node in the tree is now the root of the tree, and every node has no left child and only 1 right child.</p>\n\n<pre><strong>Example 1:</strong>\n<strong>Input:</strong> [5,3,6,2,4,null,8,1,null,null,null,7,9]\n\n       5\n      / \\\n    3    6\n   / \\    \\\n  2   4    8\n&nbsp;/        / \\ \n1        7   9\n\n<strong>Output:</strong> [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9]\n\n 1\n&nbsp; \\\n&nbsp;  2\n&nbsp;   \\\n&nbsp;    3\n&nbsp;     \\\n&nbsp;      4\n&nbsp;       \\\n&nbsp;        5\n&nbsp;         \\\n&nbsp;          6\n&nbsp;           \\\n&nbsp;            7\n&nbsp;             \\\n&nbsp;              8\n&nbsp;               \\\n                 9  </pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the given tree will be between <code>1</code> and <code>100</code>.</li>\n\t<li>Each node will have a unique integer value from <code>0</code> to <code>1000</code>.</li>\n</ul>\n</div>", "language": "c", "solution": "#include<stdio.h>\n\nstruct TreeNode\n{\n    int val;\n    struct TreeNode *left;\n    struct TreeNode *right;\n};\n\nstruct TreeNode *increasingBST(struct TreeNode *root)\n{\n    struct TreeNode *middle = (struct TreeNode *)malloc(sizeof(struct TreeNode));\n    middle->right = NULL;\n    middle->left = NULL;\n    middle->val = root->val;\n\n    struct TreeNode *left;\n\n    if (root->left)\n    {\n        left = increasingBST(root->left);\n        struct TreeNode *temp = left;\n        while (temp->right)\n        {\n            temp = temp->right;\n        }\n        temp->right = middle;\n    }\n\n    if (root->right)\n    {\n        middle->right = increasingBST(root->right);\n    }\n    return root->left ? left : middle;\n}"}
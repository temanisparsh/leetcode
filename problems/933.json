{"link": "https://leetcode.com/problems/number-of-recent-calls", "name": "Number of Recent Calls", "difficulty": "Easy", "statement": "<div><p>Write a class <code>RecentCounter</code> to count recent requests.</p>\n\n<p>It has only one method:&nbsp;<code>ping(int t)</code>, where t represents some time in milliseconds.</p>\n\n<p>Return the number of <code>ping</code>s that have been made from 3000 milliseconds ago until now.</p>\n\n<p>Any ping with time in <code>[t - 3000, t]</code> will count, including the current ping.</p>\n\n<p>It is guaranteed that every call to <code>ping</code> uses a strictly larger value of&nbsp;<code>t</code> than before.</p>\n\n<p>&nbsp;</p>\n\n<p><strong>Example 1:</strong></p>\n\n<pre><strong>Input: </strong>inputs = <span id=\"example-input-1-1\">[\"RecentCounter\",\"ping\",\"ping\",\"ping\",\"ping\"]</span>, inputs = <span id=\"example-input-1-2\">[[],[1],[100],[3001],[3002]]</span>\n<strong>Output: </strong><span id=\"example-output-1\">[null,1,2,3,3]</span></pre>\n\n<p>&nbsp;</p>\n\n<p><strong>Note:</strong></p>\n\n<ol>\n\t<li>Each test case will have at most <code>10000</code> calls to <code>ping</code>.</li>\n\t<li>Each test case will call&nbsp;<code>ping</code> with strictly increasing values of <code>t</code>.</li>\n\t<li>Each call to ping will have <code>1 &lt;= t &lt;= 10^9</code>.</li>\n</ol>\n\n<div>\n<p>&nbsp;</p>\n</div></div>", "language": "cpp", "solution": "#include <iostream>\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nclass RecentCounter\n{\n\npublic:\n    vector<int> pings;\n    int size;\n    int lastIndex;\n\n    RecentCounter()\n    {\n        this->lastIndex = 0;\n        this->size = 0;\n    }\n\n    int ping(int t)\n    {\n        this->pings.push_back(t);\n        ++this->size;\n        for (; this->lastIndex < this->size && this->pings[this->lastIndex] < t - 3000; ++this->lastIndex)\n            ;\n        return this->size - this->lastIndex;\n    }\n};"}
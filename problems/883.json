{"link": "https://leetcode.com/problems/projection-area-of-3d-shapes", "name": "Projection Area of 3D Shapes", "difficulty": "Easy", "statement": "<div><p>On a&nbsp;<code>N&nbsp;*&nbsp;N</code> grid, we place some&nbsp;<code>1 * 1 * 1&nbsp;</code>cubes that are axis-aligned with the x, y, and z axes.</p>\n\n<p>Each value&nbsp;<code>v = grid[i][j]</code>&nbsp;represents a tower of&nbsp;<code>v</code>&nbsp;cubes placed on top of grid cell <code>(i, j)</code>.</p>\n\n<p>Now we view the&nbsp;<em>projection</em>&nbsp;of these cubes&nbsp;onto the xy, yz, and zx planes.</p>\n\n<p>A projection is like a shadow, that&nbsp;maps our 3 dimensional figure to a 2 dimensional plane.&nbsp;</p>\n\n<p>Here, we are viewing the \"shadow\" when looking at the cubes from the top, the front, and the side.</p>\n\n<p>Return the total area of all three projections.</p>\n\n<p>&nbsp;</p>\n\n<div>\n<ul>\n</ul>\n</div>\n\n<div>\n<div>\n<ul>\n</ul>\n</div>\n</div>\n\n<div>\n<div>\n<div>\n<div>\n<ul>\n</ul>\n</div>\n</div>\n</div>\n</div>\n\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<ul>\n</ul>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n\n<div>\n<p><strong>Example 1:</strong></p>\n\n<pre><strong>Input: </strong><span id=\"example-input-1-1\">[[2]]</span>\n<strong>Output: </strong><span id=\"example-output-1\">5</span>\n</pre>\n\n<div>\n<p><strong>Example 2:</strong></p>\n\n<pre><strong>Input: </strong><span id=\"example-input-2-1\">[[1,2],[3,4]]</span>\n<strong>Output: </strong><span id=\"example-output-2\">17</span>\n<strong>Explanation: </strong>\nHere are the three projections (\"shadows\") of the shape made with each axis-aligned plane.\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/08/02/shadow.png\" style=\"width: 749px; height: 200px;\">\n</pre>\n\n<div>\n<p><strong>Example 3:</strong></p>\n\n<pre><strong>Input: </strong><span id=\"example-input-3-1\">[[1,0],[0,2]]</span>\n<strong>Output: </strong><span id=\"example-output-3\">8</span>\n</pre>\n\n<div>\n<p><strong>Example 4:</strong></p>\n\n<pre><strong>Input: </strong><span id=\"example-input-4-1\">[[1,1,1],[1,0,1],[1,1,1]]</span>\n<strong>Output: </strong><span id=\"example-output-4\">14</span>\n</pre>\n\n<div>\n<p><strong>Example 5:</strong></p>\n\n<pre><strong>Input: </strong><span id=\"example-input-5-1\">[[2,2,2],[2,1,2],[2,2,2]]</span>\n<strong>Output: </strong><span id=\"example-output-5\">21</span>\n</pre>\n\n<p>&nbsp;</p>\n\n<div>\n<div>\n<div>\n<p><span><strong>Note:</strong></span></p>\n\n<ul>\n\t<li><code>1 &lt;= grid.length = grid[0].length&nbsp;&lt;= 50</code></li>\n\t<li><code>0 &lt;= grid[i][j] &lt;= 50</code></li>\n</ul>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>", "language": "cpp", "solution": "#include <iostream>\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nclass Solution\n{\npublic:\n    int projectionArea(vector<vector<int>> &grid)\n    {\n        int n = grid.size();\n\n        int top = 0;\n        for (vector<int> temp : grid)\n        {\n            for (int i : temp)\n            {\n                if (i)\n                    ++top;\n            }\n        }\n\n        vector<int> front;\n        vector<int> right;\n        for (int i = 0; i < n; i++)\n        {\n            front.push_back(0);\n            right.push_back(0);\n            for (int j = 0; j < n; j++)\n            {\n                front[i] = max(front[i], grid[i][j]);\n                right[i] = max(right[i], grid[j][i]);\n            }\n        }\n\n        return top + accumulate(front.begin(), front.end(), 0) + accumulate(right.begin(), right.end(), 0);\n    }\n};"}
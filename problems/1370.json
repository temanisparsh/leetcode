{"link": "https://leetcode.com/problems/increasing-decreasing-string", "name": "Increasing Decreasing String", "difficulty": "Easy", "statement": "<div><p>Given a string <code>s</code>. You should re-order the string using the following algorithm:</p>\n\n<ol>\n\t<li>Pick the <strong>smallest</strong> character from <code>s</code> and <strong>append</strong> it to the result.</li>\n\t<li>Pick the <strong>smallest</strong> character from <code>s</code> which is greater than the last appended character to the result and <strong>append</strong> it.</li>\n\t<li>Repeat step 2 until you cannot pick more characters.</li>\n\t<li>Pick the <strong>largest</strong>&nbsp;character from <code>s</code> and <strong>append</strong> it to the result.</li>\n\t<li>Pick the <strong>largest</strong>&nbsp;character from <code>s</code> which is smaller than the last appended character to the result and <strong>append</strong> it.</li>\n\t<li>Repeat step 5 until you cannot pick more characters.</li>\n\t<li>Repeat the steps from 1 to 6 until you pick all characters from <code>s</code>.</li>\n</ol>\n\n<p>In each step, If the smallest or the largest character appears more than once you can choose any occurrence and append it to the result.</p>\n\n<p>Return <em>the result string</em> after sorting <code>s</code>&nbsp;with this algorithm.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre><strong>Input:</strong> s = \"aaaabbbbcccc\"\n<strong>Output:</strong> \"abccbaabccba\"\n<strong>Explanation:</strong> After steps 1, 2 and 3 of the first iteration, result = \"abc\"\nAfter steps 4, 5 and 6 of the first iteration, result = \"abccba\"\nFirst iteration is done. Now s = \"aabbcc\" and we go back to step 1\nAfter steps 1, 2 and 3 of the second iteration, result = \"abccbaabc\"\nAfter steps 4, 5 and 6 of the second iteration, result = \"abccbaabccba\"\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre><strong>Input:</strong> s = \"rat\"\n<strong>Output:</strong> \"art\"\n<strong>Explanation:</strong> The word \"rat\" becomes \"art\" after re-ordering it with the mentioned algorithm.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre><strong>Input:</strong> s = \"leetcode\"\n<strong>Output:</strong> \"cdelotee\"\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre><strong>Input:</strong> s = \"ggggggg\"\n<strong>Output:</strong> \"ggggggg\"\n</pre>\n\n<p><strong>Example 5:</strong></p>\n\n<pre><strong>Input:</strong> s = \"spo\"\n<strong>Output:</strong> \"ops\"\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 500</code></li>\n\t<li><code>s</code> contains only lower-case English letters.</li>\n</ul>\n</div>", "language": "cpp", "solution": "#include <iostream>\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    string sortString(string s) {\n\n        int n = s.length();\n\n        int count[26];\n        fill_n(count, 26, 0);\n\n        stringstream ss;\n\n        for(char i: s) {\n            ++count[(int)(i) - 97];\n        }\n\n        int max_count = -1;\n        for(int i: count) {\n            max_count = max_count > i ? max_count : i;\n        }\n\n        for (int step = 1; step <= max_count; ++step ) {\n\n            for (int i = 0; i < 26; i++) {\n                if (count[i] >= step) {\n                    ss << (char)(i + 97);\n                }\n            }\n\n            ++step;\n\n            for (int i = 25; i >= 0; i--) {\n                if (count[i] >= step) {\n                    ss << (char)(i + 97);\n                }\n            }\n\n        }\n\n        return ss.str();\n\n    }\n};"}
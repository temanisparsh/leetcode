{"link": "https://leetcode.com/problems/lucky-numbers-in-a-matrix", "name": "Lucky Numbers in a Matrix", "difficulty": "Easy", "statement": "<div><p>Given a <code>m * n</code> matrix of <strong>distinct </strong>numbers, return all lucky numbers in the&nbsp;matrix in <strong>any </strong>order.</p>\n\n<p>A lucky number is an element of the matrix such that it is the minimum element in its row and maximum in its column.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre><strong>Input:</strong> matrix = [[3,7,8],[9,11,13],[15,16,17]]\n<strong>Output:</strong> [15]\n<strong>Explanation:</strong> 15 is the only lucky number since it is the minimum in its row and the maximum in its column\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre><strong>Input:</strong> matrix = [[1,10,4,2],[9,3,8,7],[15,16,17,12]]\n<strong>Output:</strong> [12]\n<strong>Explanation:</strong> 12 is the only lucky number since it is the minimum in its row and the maximum in its column.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre><strong>Input:</strong> matrix = [[7,8],[1,2]]\n<strong>Output:</strong> [7]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == mat.length</code></li>\n\t<li><code>n == mat[i].length</code></li>\n\t<li><code>1 &lt;= n, m &lt;= 50</code></li>\n\t<li><code>1 &lt;=&nbsp;matrix[i][j]&nbsp;&lt;= 10^5</code>.</li>\n\t<li>All elements in the matrix are distinct.</li>\n</ul></div>", "language": "cpp", "solution": "#include <iostream>\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nclass Solution\n{\npublic:\n    vector<int> luckyNumbers(vector<vector<int>> &matrix)\n    {\n\n        int m = matrix.size();\n        int n = matrix[0].size();\n\n        int min_row[m];\n        int max_col[n];\n\n        fill_n(min_row, m, 1000000);\n        fill_n(max_col, n, 0);\n\n        for (int i = 0; i < m; i++)\n            for (int j = 0; j < n; j++)\n            {\n                min_row[i] = min_row[i] < matrix[i][j] ? min_row[i] : matrix[i][j];\n                max_col[j] = max_col[j] > matrix[i][j] ? max_col[j] : matrix[i][j];\n            }\n\n        vector<int> res;\n\n        for (int i = 0; i < m; i++)\n            for (int j = 0; j < n; j++)\n                if (min_row[i] == matrix[i][j] && max_col[j] == matrix[i][j])\n                    res.push_back(matrix[i][j]);\n        \n        return res;\n    }\n};"}
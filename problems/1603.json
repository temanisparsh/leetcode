{"link": "https://leetcode.com/problems/design-parking-system", "name": "Design Parking System", "difficulty": "Easy", "statement": "<div><p>Design a parking system for a parking lot. The parking lot has three kinds of parking spaces: big, medium, and small, with a fixed number of slots for each size.</p>\n\n<p>Implement the <code>ParkingSystem</code> class:</p>\n\n<ul>\n\t<li><code>ParkingSystem(int big, int medium, int small)</code> Initializes object of the <code>ParkingSystem</code> class. The number of slots for each parking space are given as part of the constructor.</li>\n\t<li><code>bool addCar(int carType)</code> Checks whether there is a parking space of <code>carType</code> for the car that wants to get into the parking lot. <code>carType</code> can be of three kinds: big, medium, or small, which are represented by <code>1</code>, <code>2</code>, and <code>3</code> respectively. <strong>A car can only park in a parking space of its </strong><code>carType</code>. If there is no space available, return <code>false</code>, else park the car in that size space and return <code>true</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre><strong>Input</strong>\n[\"ParkingSystem\", \"addCar\", \"addCar\", \"addCar\", \"addCar\"]\n[[1, 1, 0], [1], [2], [3], [1]]\n<strong>Output</strong>\n[null, true, true, false, false]\n\n<strong>Explanation</strong>\nParkingSystem parkingSystem = new ParkingSystem(1, 1, 0);\nparkingSystem.addCar(1); // return true because there is 1 available slot for a big car\nparkingSystem.addCar(2); // return true because there is 1 available slot for a medium car\nparkingSystem.addCar(3); // return false because there is no available slot for a small car\nparkingSystem.addCar(1); // return false because there is no available slot for a big car. It is already occupied.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= big, medium, small &lt;= 1000</code></li>\n\t<li><code>carType</code> is <code>1</code>, <code>2</code>, or <code>3</code></li>\n\t<li>At most <code>1000</code> calls will be made to <code>addCar</code></li>\n</ul>\n</div>", "language": "cpp", "solution": "#include <iostream>\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nclass ParkingSystem\n{\npublic:\n    int b, s, m;\n    int c_big, c_small, c_medium;\n\n    ParkingSystem(int big, int medium, int small)\n    {\n        b = 0;\n        s = 0;\n        m = 0;\n        c_big = big;\n        c_medium = medium;\n        c_small = small;\n    }\n\n    bool addCar(int carType)\n    {\n        switch (carType)\n        {\n        case 3:\n            if (s < c_small)\n            {\n                ++s;\n                cout << s;\n                return true;\n            }\n            return false;\n            break;\n        case 2:\n            if (m < c_medium)\n            {\n                ++m;\n                cout << m;\n                return true;\n            }\n            return false;\n            break;\n        case 1:\n            if (b < c_big)\n            {\n                cout << b;\n                ++b;\n                return true;\n            }\n            return false;\n            break;\n        default:\n            break;\n        }\n        return false;\n    }\n};"}